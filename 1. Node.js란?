# Node.js란?
Node.js는 C++ 기반 V8 엔진 위에서 동작하는 이벤트 처리 I/O 프레임워크로, 웹 서버와 같이 확장성 있는 네트워크 프로그램 제작을 위해 고안되었습니다. 서버 사이드 플랫폼이라고 이야기 해도 무방합니다.

## Node의 주요 객체
Node.js (이하 Node)의 주요 객체로는 `http`, `fs`, `path`, `url`, `stream` 이 있다. `url` 같은 경우에는  Express 프레임 워크를 사용 할 경우 잘 사용하지 않는다.
- `http` : http 요청을 처리하는 역할을 한다. `createServer` 메소드로 서버를 열 수 있다.
- `fs` : File Stream을 처리한다. 파일 입출력에 사용 되며, http 객체와 함께 사용하여 http의 formData로 들어온 파일 요청을 처리하고, http 요청의 response로 파일을 보낼 수 있게 해준다.
- `path` : 파일 경로와 관련된 연산을 진행한다. `http`. `fs` 와 함께 사용한다.
- `url` : url 경로와 관련된 연산을 진행한다.
- `stream` : 요청 버퍼를 서버에 저장 후 처리하지 않고 바로 바이트 단위로 처리할 때 사용. 파일 입출력에서 많이 사용한다.

예제는 다음과 같다.

```javascript
var http = require('http');
var fs = require('fs');
var url = require('url');

// request, response를 콜백함수로 처리한다.
var app = http.createServer(function(request,response){
    var _url = request.url;
    var queryData = url.parse(_url, true).query;
    console.log(queryData.id);
    if(_url == '/'){
      // fs.readFile의 콜백함수를 통해 데이터를 처리한다.
      fs.readFile(`data/${queryData.id}`, 'utf8', function(err, description){
        var template = `
        <!doctype html>
        <html>
        <head>
          <title>WEB1 - ${title}</title>
          <meta charset="utf-8">
        </head>
        <body>
          <h1><a href="/">WEB</a></h1>
          <ul>
            <li><a href="/?id=HTML">HTML</a></li>
            <li><a href="/?id=CSS">CSS</a></li>
            <li><a href="/?id=JavaScript">JavaScript</a></li>
          </ul>
          <h2>${title}</h2>
          <p>${description}</p>
        </body>
        </html>
        `;
      response.end(template);
    })
    }
    if(_url == '/favicon.ico'){
      return response.writeHead(404);
    }
    response.writeHead(200);
    response.end(queryData.id);
 
});
app.listen(3000);
```

http.createServer의 콜백함수의 파라미터인 request와 response객체는 각각 요청과 응답을 처리 한다.

request 객체의 파라미터
- `url` : 요청 url 정보
- `params`: 요청 파라미터 (쿼리와 다름, 나중에 언급 하겠다. 예로는 .../post/1 로 받는 요청에서 1에 해당하는 값)
- `body` : 요청 body에 담긴 데이터
- `query` : 요청 url에 담긴 쿼리 스트링을 객체화 시킨 것

response 객체의 메소드 및 파라미터
- `writeHead` : 응답에 Status Code, Response Type등을 담을 수 있다
- `write` : 응답의 내용 삽입
- `end` : 응답의 끝, write처럼 내용을 삽입 할 수 있다.
